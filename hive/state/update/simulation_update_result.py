from __future__ import annotations

from typing import NamedTuple, Tuple, Optional


class SimulationUpdateResult(NamedTuple):
    """
    Wrapper around results from single simulation update function. Includes reports.

    :param simulation_state: The updated simulation state.
    :type simulation_state: :py:obj:`SimulationState`
    :param reports: Any reports generated by the update.
    :type reports: :py:obj:`Tuple[str, ...]`
    """
    simulation_state: 'SimulationState'
    reports: Tuple[str, ...] = ()

    def add_report(self, report: str) -> SimulationUpdateResult:
        """
        Adds a report to the update result.

        :param report: Report to add
        :return: updated SimulationUpdateResult
        """
        return self._replace(reports=(report,) + self.reports)

    def update_sim(self, sim: 'SimulationState', report: Optional[str] = None) -> SimulationUpdateResult:
        """
        Update the simulation state within the SimulationUpdateResult with optional additional reports.

        :param sim: the updated simulation state.
        :param report: any additional reports
        :return: the updated SimulationUpdateResult
        """
        if report is not None:
            return self._replace(
                simulation_state=sim,
                reports=(report,) + self.reports
            )
        else:
            return self._replace(
                simulation_state=sim
            )